{"Name":"Floating Search View","Id":2356,"Alias":"FloatingSearchView","Description":"\n**FloatingSearchView** is an implementation of a floating search box with search suggestions.\n\n## Usage\n    \nAdd a FloatingSearchView to your view hierarchy, and make sure that it takes \nup the full width and height of the screen.\n\n    \u003ccom.arlib.floatingsearchview.FloatingSearchView\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/floating_search_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:floatingSearch_searchBarMarginLeft=\"@dimen/search_view_inset\"\n        app:floatingSearch_searchBarMarginTop=\"@dimen/search_view_inset\"\n        app:floatingSearch_searchBarMarginRight=\"@dimen/search_view_inset\"\n        app:floatingSearch_showMenuAction=\"true\"\n        app:floatingSearch_searchHint=\"Search...\"\n        app:floatingSearch_voiceRecHint=\"Say something...\"\n        app:floatingSearch_showSearchHintWhenNotFocused=\"true\"\n        app:floatingSearch_showVoiceInput=\"true\"\n        app:floatingSearch_showOverFlowMenu=\"true\"\n        app:floatingSearch_hideOverflowMenuWhenFocused=\"true\"\n        app:floatingSearch_showSearchKey=\"false\"\n        app:floatingSearch_dismissOnOutsideTouch=\"true\"\n        app:floatingSearch_menu=\"@menu/menu_main\" /\u003e\n\nThen, listen to query changes and provide suggestion items that implement \n`ISearchSuggestion`:\n\n    searchView.QueryChange += async (sender, e) =\u003e {\n        if (!string.IsNullOrEmpty (e.OldQuery) \u0026\u0026 string.IsNullOrEmpty (e.NewQuery)) {\n            searchView.ClearSuggestions ();\n        } else {\n            // show the top left circular progress\n            searchView.ShowProgress ();\n            \n            // simulates a query call to a data source with a new query.\n            var results = await GetDataAsync (e.NewQuery);\n            \n            // swap the data and collapse/expand the dropdown\n            searchView.SwapSuggestions (results);\n            \n            // complete the progress\n            searchView.HideProgress ();\n        }\n    };\n\n### Configuration\n\n### Adding Overflow Menu Items\n\nA menu can be added to the floating search view:\n\n    \u003ccom.arlib.floatingsearchview.FloatingSearchView\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        ...\n        app:floatingSearch_menu=\"@menu/menu_main\" /\u003e\n\nThen, listen for item selections: \n\n    searchView.MenuItemClick += (sender, e) =\u003e {\n        var item = e.MenuItem\n    };\n\n### Managing Suggestions\n\n\nFirst, implement `ISearchSuggestion`:\n\n    public class MySuggestion : Java.Lang.Object, ISearchSuggestion\n    {\n        // ISearchSuggestion interface\n        \n        public string GetBody () {\n            // return the text of the suggestion \n        }\n        public void SetBodyText (TextView textView) {\n            // customize the appearace of the search TextView\n        }\n        public bool SetLeftIcon (ImageView imageView) {\n            // set the image for the suggestion ImageView\n        }\n        public IParcelableCreator GetCreator () {\n            return CREATOR ();\n        }\n\n        // IParcelable interface\n        \n        public MySuggestion (Parcel source) {\n            // read the saved values from source\n        }\n\n        [ExportField (\"CREATOR\")]\n        public static IParcelableCreator CREATOR () {\n            return new MySuggestionCreator ();\n        }\n        public int DescribeContents () {\n            return 0;\n        }\n        public void WriteToParcel (Parcel dest, ParcelableWriteFlags flags) {\n            // write data to dest\n        }\n\n        public class MySuggestionCreator : Java.Lang.Object, IParcelableCreator\n        {\n            public Java.Lang.Object CreateFromParcel (Parcel source) {\n                return new MySuggestion (source);\n            }\n            public Java.Lang.Object[] NewArray (int size) {\n                return new MySuggestion[size];\n            }\n        }\n    }\n### Enable Voice Recognition\n\nIn your xml, add:\n\n    \u003ccom.arlib.floatingsearchview.FloatingSearchView\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        ...\n        app:floatingSearch_showVoiceInput=\"true\" /\u003e\n\nThen, in your activity, add `OnHostActivityResult` to the `OnActivityResult` method:\n\n    protected override void OnActivityResult (int requestCode, Result resultCode, Android.Content.Intent data)\n    {\n        base.OnActivityResult (requestCode, resultCode, data);\n        \n        searchView.OnHostActivityResult (requestCode, resultCode, data);\n    }\n","Version":"1.0.2.0","Summary":"An implementation of a floating search box with search suggestions.","QuickStart":"\n**FloatingSearchView** is an implementation of a floating search box with search suggestions.\n\n## Usage\n    \nAdd a FloatingSearchView to your view hierarchy, and make sure that it takes \nup the full width and height of the screen.\n\n    \u003ccom.arlib.floatingsearchview.FloatingSearchView\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/floating_search_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:floatingSearch_searchBarMarginLeft=\"@dimen/search_view_inset\"\n        app:floatingSearch_searchBarMarginTop=\"@dimen/search_view_inset\"\n        app:floatingSearch_searchBarMarginRight=\"@dimen/search_view_inset\"\n        app:floatingSearch_showMenuAction=\"true\"\n        app:floatingSearch_searchHint=\"Search...\"\n        app:floatingSearch_voiceRecHint=\"Say something...\"\n        app:floatingSearch_showSearchHintWhenNotFocused=\"true\"\n        app:floatingSearch_showVoiceInput=\"true\"\n        app:floatingSearch_showOverFlowMenu=\"true\"\n        app:floatingSearch_hideOverflowMenuWhenFocused=\"true\"\n        app:floatingSearch_showSearchKey=\"false\"\n        app:floatingSearch_dismissOnOutsideTouch=\"true\"\n        app:floatingSearch_menu=\"@menu/menu_main\" /\u003e\n\nThen, listen to query changes and provide suggestion items that implement \n`ISearchSuggestion`:\n\n    searchView.QueryChange += async (sender, e) =\u003e {\n        if (!string.IsNullOrEmpty (e.OldQuery) \u0026\u0026 string.IsNullOrEmpty (e.NewQuery)) {\n            searchView.ClearSuggestions ();\n        } else {\n            // show the top left circular progress\n            searchView.ShowProgress ();\n            \n            // simulates a query call to a data source with a new query.\n            var results = await GetDataAsync (e.NewQuery);\n            \n            // swap the data and collapse/expand the dropdown\n            searchView.SwapSuggestions (results);\n            \n            // complete the progress\n            searchView.HideProgress ();\n        }\n    };\n\n### Configuration\n\n### Adding Overflow Menu Items\n\nA menu can be added to the floating search view:\n\n    \u003ccom.arlib.floatingsearchview.FloatingSearchView\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        ...\n        app:floatingSearch_menu=\"@menu/menu_main\" /\u003e\n\nThen, listen for item selections: \n\n    searchView.MenuItemClick += (sender, e) =\u003e {\n        var item = e.MenuItem\n    };\n\n### Managing Suggestions\n\n\nFirst, implement `ISearchSuggestion`:\n\n    public class MySuggestion : Java.Lang.Object, ISearchSuggestion\n    {\n        // ISearchSuggestion interface\n        \n        public string GetBody () {\n            // return the text of the suggestion \n        }\n        public void SetBodyText (TextView textView) {\n            // customize the appearace of the search TextView\n        }\n        public bool SetLeftIcon (ImageView imageView) {\n            // set the image for the suggestion ImageView\n        }\n        public IParcelableCreator GetCreator () {\n            return CREATOR ();\n        }\n\n        // IParcelable interface\n        \n        public MySuggestion (Parcel source) {\n            // read the saved values from source\n        }\n\n        [ExportField (\"CREATOR\")]\n        public static IParcelableCreator CREATOR () {\n            return new MySuggestionCreator ();\n        }\n        public int DescribeContents () {\n            return 0;\n        }\n        public void WriteToParcel (Parcel dest, ParcelableWriteFlags flags) {\n            // write data to dest\n        }\n\n        public class MySuggestionCreator : Java.Lang.Object, IParcelableCreator\n        {\n            public Java.Lang.Object CreateFromParcel (Parcel source) {\n                return new MySuggestion (source);\n            }\n            public Java.Lang.Object[] NewArray (int size) {\n                return new MySuggestion[size];\n            }\n        }\n    }\n### Enable Voice Recognition\n\nIn your xml, add:\n\n    \u003ccom.arlib.floatingsearchview.FloatingSearchView\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        ...\n        app:floatingSearch_showVoiceInput=\"true\" /\u003e\n\nThen, in your activity, add `OnHostActivityResult` to the `OnActivityResult` method:\n\n    protected override void OnActivityResult (int requestCode, Result resultCode, Android.Content.Intent data)\n    {\n        base.OnActivityResult (requestCode, resultCode, data);\n        \n        searchView.OnHostActivityResult (requestCode, resultCode, data);\n    }\n","Hash":"ab93295d7d1d4b4c0e550ec52c418b94","TargetPlatforms":["android"],"TrialHash":null}